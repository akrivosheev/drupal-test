<?php

/**
 * @file
 * Add custom field using the Field Types API.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function adyax_test_field_info() {
  return array(
    'adyax_test_url' => array(
      'label' => t('Add Vimeo'),
      'description' => t('Show Video'),
      'default_widget' => 'adyax_test_video',
      'default_formatter' => 'adyax_test_video',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function adyax_test_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_formatter_info().
 */
function adyax_test_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'adyax_test_video' => array(
      'label' => t('Add url to show video'),
      'field types' => array('adyax_test_url'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function adyax_test_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter outputs the video thumbnail.
    case 'adyax_test_video':
      foreach ($items as $delta => $item) {
        $link = adyax_test_convert_video_link($item['url']);
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => "<iframe src= $link allowfullscreen></iframe>",
        );
      }
      break;
  }
  return $element;
}

/**
 * Convert simple link to embed.
 *
 * @param string $url
 *   The url.
 *
 * @return null|string
 *   Null on failure to match, the service's name on success.
 */
function adyax_test_convert_video_link($url) {
  if (preg_match('%vimeo%i', $url)) {
    $vimeo_video_id = adyax_test_parse_url_for_last_element($url);
    $embed = "http://player.vimeo.com/video/$vimeo_video_id?byline=0&amp;portrait=0&amp;autoplay=1";
    return $embed;
  }
  return NULL;
}

/**
 * Find the last element in a url, without any trailing parameters.
 *
 * @param string $url
 *   The url.
 *
 * @return string
 *   The last element of the url
 */
function adyax_test_parse_url_for_last_element($url) {
  $url_parts = explode("/", $url);
  $prospect = end($url_parts);
  $prospect_and_params = preg_split("/(\?|\=|\&)/", $prospect);
  if ($prospect_and_params) {
    return $prospect_and_params[0];
  }
  else {
    return $prospect;
  }

}

/**
 * Implements hook_field_widget_info().
 */
function adyax_test_field_widget_info() {
  return array(
    'adyax_test_video' => array(
      'label' => t('Show video'),
      'field types' => array('adyax_test_url'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function adyax_test_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value_url = isset($items[$delta]['url']) ? $items[$delta]['url'] : '';

  $url_parts = explode("/", $value_url);
  $value_code = end($url_parts);

  $widget_url = $element;
  $widget_url['#delta'] = $delta;

  $widget_code = $element;
  $widget_code['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'adyax_test_video':
      $widget_url += array(
        '#type' => 'textfield',
        '#default_value' => $value_url,
        '#size' => 25,
        '#maxlength' => 35,
      );
      $widget_code += array(
        '#type' => 'hidden',
        '#default_value' => $value_code,
        '#size' => 25,
        '#maxlength' => 35,
      );
      break;
  }

  $element['url'] = $widget_url;
  $element['code'] = $widget_code;
  return $element;
}
